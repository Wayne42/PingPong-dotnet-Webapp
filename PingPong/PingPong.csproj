<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Client\index.html" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="MessagePackAnalyzer" Version="2.4.59">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Protocols.MessagePack">
      <Version>7.0.3</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="4.9.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Client\Media\" />
    <Folder Include="wwwroot\" />
    <Folder Include="wwwroot\" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Server\Game\Model\BallModel.cs">
      <Generator>DtsGenerator</Generator>
      <LastGenOutput>BallModel.cs.d.ts</LastGenOutput>
    </Compile>
    <Compile Update="Server\Game\Model\FieldModel.cs">
      <Generator></Generator>
    </Compile>
    <Compile Update="Server\Game\Model\GameModel.cs">
      <Generator></Generator>
    </Compile>
    <Compile Update="Server\Game\Model\PlayerModel.cs">
      <Generator></Generator>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Update="Server\Game\Model\BallModel.cs.d.ts">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>BallModel.cs</DependentUpon>
    </TypeScriptCompile>
    <TypeScriptCompile Update="Server\Game\Model\GameModel.cs.d.ts">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>GameModel.cs</DependentUpon>
    </TypeScriptCompile>
  </ItemGroup>



    <!--
      1. Install npm packages
      "Inputs" and "Outputs" are used for incremental builds. If all output items are up-to-date, MSBuild skips the target.
      The first time the task is executed. Then, it only runs when you change the package.json file.
      Documentation: https://learn.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?WT.mc_id=DT-MVP-5003978
   -->
  <Target Name="NpmInstall" Inputs="package.json" Outputs="node_modules/.install-stamp">
    <!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     -->
    <Exec Command="npm ci" Condition="'$(RestorePackagesWithLockFile)' == 'true'" />
    <Exec Command="npm install" Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

    <!-- Write the stamp file, so incremental builds work -->
    <Touch Files="node_modules/.install-stamp" AlwaysCreate="true" />
  </Target>

  <!--
      2. Run npm run build before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
      
   -->
  <Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild">
    <Exec Command="npm run release" />
  </Target>

</Project>
